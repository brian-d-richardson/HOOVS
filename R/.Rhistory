# number of categories for ordinal outcome
J <- 4
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
rm(list = ls())
library(dplyr)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# grid of lambdas
lambdas <- seq(0, 0.5, 0.1)
# test our LASSO-penalized ordinal regression function
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
lambdas
# test our LASSO-penalized ordinal regression function
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
library(tictoc)
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
# compare with ordinalNet results
tic("ordinalNet() function")
ordnet.res <- ordinalNet::ordinalNet(
x = x,
y = dat$y,
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas[l],
link = "logit",
family = "cumulative"
)
ordnet.res <- ordinalNet::ordinalNet(
x = dat[, -1],
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas[l],
link = "logit",
family = "cumulative"
)
# compare with ordinalNet results
tic("ordinalNet() function")
ordnet.res <- ordinalNet::ordinalNet(
x = dat[, -1],
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
# compare with ordinalNet results
tic("ordinalNet() function")
ordnet.res <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- c(res.ordreg$alpha, res.ordreg$beta)
coef.ordreg
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
View(coef.ordreg)
ordnet.coef <- as.numeric(ordnet.res$coefs)
coef.ordnet <- as.numeric(ordnet.res$coefs)
View(coef.ordreg)
coef.ordnet - coef.ordreg
ggplot(NULL,
aes(x = coef.ordreg[1, ],
y = coef.ordnet[1, ])) +
geom_point()
coef.ordreg[1, ]
coef.ordnet[1, ]
coef.ordnet <- ordnet.res$coefs
coef.ordnet
coef.ordnet <- as.matrix(ordnet.res$coefs)
ggplot(NULL,
aes(x = coef.ordreg[1, ],
y = coef.ordnet[1, ])) +
geom_point()
View(coef.ordreg)
View(coef.ordnet)
coef.ordnet <- as.matrix(ordnet.res$coefs)[rev(1:length(lambdas)),]
ggplot(NULL,
aes(x = coef.ordreg[1, ],
y = coef.ordnet[1, ])) +
geom_point()
coef.all <- rbind(cbind("ordreg", coef.ordreg),
cbind("ordnet", coef.ordnet))
View(coef.all)
coef.all <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet))
colnames(coef.all <- c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)))
c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)))
c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))
colnames(coef.all <- c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)))
colnames(coef.all) <- c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))
c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))
coef.all <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames()<-` c("method",
coef.all <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames()<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)))
coef.all <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)))
View(coef.all)
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)))
library(tidyr)
View(coef.wide)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda))
View(coef.long)
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point()
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = method, .funs = as.numeric)
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = -"method", .funs = as.numeric)
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = !"method", .funs = as.numeric)
colnames[coef$wide][-1]
colnames[coef.wide][-1]
colnames[coef.wide]
coef.wide
colnames(coef.wide)[-1]
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = colnames(coef.wide)[-1], .funs = as.numeric)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point() +
facet_wrap(~ lambda)
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 2) +
geom_abline() +
labs(x = "Coefficient Estimates from ordinalNet",
y = "Coefficient Estimates from our PGD Algorithm") +
ggtitle("Comparison of Estimates from LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 2,
shape = 2) +
geom_abline() +
labs(x = "Coefficient Estimates from ordinalNet",
y = "Coefficient Estimates from our PGD Algorithm") +
ggtitle("Comparison of Estimates from LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 2,
shape = 1) +
geom_abline() +
labs(x = "Coefficient Estimates from ordinalNet",
y = "Coefficient Estimates from our PGD Algorithm") +
ggtitle("Comparison of Estimates from LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline() +
labs(x = "Coefficient Estimates from ordinalNet",
y = "Coefficient Estimates from our PGD Algorithm") +
ggtitle("Comparison of Estimates from LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Coefficient Estimates from ordinalNet",
y = "Coefficient Estimates from our PGD Algorithm") +
ggtitle("Comparison of Estimates from LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Coefficient Estimates from ordinalNet",
y = "Coefficient Estimates from our PGD Algorithm") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet",
y = "Estimates from our ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aex(x = lambda,
y = value,
color = name)) +
geom_line()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
color = name)) +
geom_line()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
color = name)) +
geom_line()
rm(list = ls())
library(dplyr)
library(tidyr)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.01)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
# compare with ordinalNet results
tic("ordinalNet() function")
ordnet.res <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(ordnet.res$coefs)[rev(1:length(lambdas)),]
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = colnames(coef.wide)[-1], .funs = as.numeric)
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = vars(-("method")),
.funs = as.numeric)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
lambdas
rm(list = ls())
library(dplyr)
library(tidyr)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.02)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
lambdas
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
coef.ordreg
# compare with ordinalNet results
tic("ordinalNet() function")
ordnet.res <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(ordnet.res$coefs)[rev(1:length(lambdas)),]
coef.ordnet
ordnet.res$coefs
lambdas
coef.ordnet
rev(1:length(lambdas))
View(coef.ordnet)
View(coef.ordreg)
ordnet.res
ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
