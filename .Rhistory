J <- 4
# create n x p covariate matrix
X <- matrix(nrow = n,
ncol = p,
data = rnorm(n*p))
# set population parameters
alpha0 <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
beta0 <- c(1, 0.75, 0.5, 0.25, rep(0, 6)) # slopes
# linear predictors
eta0 <- X %*% beta0
# sample size
n <- 1000
# number of covariates
p <- 100
# number of categories for ordinal outcome
J <- 4
# create n x p covariate matrix
X <- matrix(nrow = n,
ncol = p,
data = rnorm(n*p))
# set population parameters
alpha0 <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
beta0 <- c(1, 0.75, 0.5, 0.25, rep(0, 6)) # slopes
# linear predictors
eta0 <- X %*% beta0
rm(list = ls())
library(MASS)
library(foreign)
library("bios-735-project")
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 100
# number of categories for ordinal outcome
J <- 4
# create n x p covariate matrix
X <- matrix(nrow = n,
ncol = p,
data = rnorm(n*p))
# set population parameters
alpha0 <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
beta0 <- c(1, 0.75, 0.5, 0.25, rep(0, p - 4)) # slopes
# linear predictors
eta0 <- X %*% beta0
# compute the cumulative probabilities for each of J categories and n subjects
cum.probs <- matrix(nrow = n,
ncol = J)
for (j in 1:(J-1)) {
cum.probs[, j] <- inv.logit(alpha0[j] + eta0)
}
cum.probs[, J] <- 1
# compute the probabilities for each of J categories and n subjects
probs <- cum.probs - cbind(0, cum.probs[, -J])
# simulate outcomes
y <- numeric(n)
for (i in 1:n) {
y[i] <- sample(x = 1:J,
size = 1,
prob = probs[i,])
}
# combine into one data set
dat <- data.frame(cbind(y, X))
colnames(dat) <- c("y", paste0("X", 1:p))
dat$y <- factor(dat$y, levels = 1:J, ordered = T)
# example of ordinal regression using existing function MASS::polr
ord.mod.polr <- polr(polr(y ~ ., data = dat))
summary(ord.mod.polr)
logLik(ord.mod.polr)
summary(ord.mod.polr)
# test our ordinal regression function with no LASSO penalty
ord.mod.lambda0 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 0)
# test our ordinal regression function with a LASSO penalty
ord.mod.lambda5 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 5)
summary(ord.mod.lambda0)
ord.mod.lambda0
ord.mod.lambda5
# test our ordinal regression function with a LASSO penalty
ord.mod.lambda5 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 1)
ord.mod.lambda0
# sample size
n <- 1000
# number of covariates
p <- 50
# number of categories for ordinal outcome
J <- 4
# create n x p covariate matrix
X <- matrix(nrow = n,
ncol = p,
data = rnorm(n*p))
# set population parameters
alpha0 <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
beta0 <- c(1, 0.75, 0.5, 0.25, rep(0, p - 4)) # slopes
# linear predictors
eta0 <- X %*% beta0
# compute the cumulative probabilities for each of J categories and n subjects
cum.probs <- matrix(nrow = n,
ncol = J)
for (j in 1:(J-1)) {
cum.probs[, j] <- inv.logit(alpha0[j] + eta0)
}
cum.probs[, J] <- 1
# compute the probabilities for each of J categories and n subjects
probs <- cum.probs - cbind(0, cum.probs[, -J])
# simulate outcomes
y <- numeric(n)
for (i in 1:n) {
y[i] <- sample(x = 1:J,
size = 1,
prob = probs[i,])
}
# combine into one data set
dat <- data.frame(cbind(y, X))
colnames(dat) <- c("y", paste0("X", 1:p))
dat$y <- factor(dat$y, levels = 1:J, ordered = T)
# example of ordinal regression using existing function MASS::polr
ord.mod.polr <- polr(polr(y ~ ., data = dat))
summary(ord.mod.polr)
logLik(ord.mod.polr)
# test our ordinal regression function with no LASSO penalty
ord.mod.lambda0 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 0)
ord.mod.lambda0
# test our ordinal regression function with a LASSO penalty
ord.mod.lambda5 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 1)
ord.mod.lambda5
ord.mod.lambda0
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# create n x p covariate matrix
X <- matrix(nrow = n,
ncol = p,
data = rnorm(n*p))
# set population parameters
alpha0 <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
beta0 <- c(1, 0.75, 0.5, 0.25, rep(0, p - 4)) # slopes
# linear predictors
eta0 <- X %*% beta0
# compute the cumulative probabilities for each of J categories and n subjects
cum.probs <- matrix(nrow = n,
ncol = J)
for (j in 1:(J-1)) {
cum.probs[, j] <- inv.logit(alpha0[j] + eta0)
}
cum.probs[, J] <- 1
# compute the probabilities for each of J categories and n subjects
probs <- cum.probs - cbind(0, cum.probs[, -J])
# simulate outcomes
y <- numeric(n)
for (i in 1:n) {
y[i] <- sample(x = 1:J,
size = 1,
prob = probs[i,])
}
# combine into one data set
dat <- data.frame(cbind(y, X))
colnames(dat) <- c("y", paste0("X", 1:p))
dat$y <- factor(dat$y, levels = 1:J, ordered = T)
# example of ordinal regression using existing function MASS::polr
ord.mod.polr <- polr(polr(y ~ ., data = dat))
summary(ord.mod.polr)
logLik(ord.mod.polr)
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# create n x p covariate matrix
X <- matrix(nrow = n,
ncol = p,
data = rnorm(n*p))
# set population parameters
alpha0 <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
beta0 <- c(rep(1, 4), # slopes
rep(0, p - 4))
# linear predictors
eta0 <- X %*% beta0
# compute the cumulative probabilities for each of J categories and n subjects
cum.probs <- matrix(nrow = n,
ncol = J)
for (j in 1:(J-1)) {
cum.probs[, j] <- inv.logit(alpha0[j] + eta0)
}
cum.probs[, J] <- 1
# compute the probabilities for each of J categories and n subjects
probs <- cum.probs - cbind(0, cum.probs[, -J])
# simulate outcomes
y <- numeric(n)
for (i in 1:n) {
y[i] <- sample(x = 1:J,
size = 1,
prob = probs[i,])
}
# combine into one data set
dat <- data.frame(cbind(y, X))
colnames(dat) <- c("y", paste0("X", 1:p))
dat$y <- factor(dat$y, levels = 1:J, ordered = T)
# example of ordinal regression using existing function MASS::polr
ord.mod.polr <- polr(polr(y ~ ., data = dat))
summary(ord.mod.polr)
logLik(ord.mod.polr)
# test our ordinal regression function with no LASSO penalty
ord.mod.lambda0 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 0)
ord.mod.lambda0
# test our ordinal regression function with a LASSO penalty
ord.mod.lambda5 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 1)
ord.mod.lambda5
param.est <- data.frame("method" = rep(c("polr", "ordreg", "ordreg.lasso"),
each = p + J - 1))
View(param.est)
param.est <- data.frame("method" = rep(c("polr", "ordreg", "ordreg.lasso"),
each = p + J - 1),
"paremeter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
each = 3))
param.est <- data.frame("method" = rep(c("polr", "ordreg", "ordreg.lasso"),
each = p + J - 1),
"paremeter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 3))
ord.mod.polr$coefficients
# test our ordinal regression function with a LASSO penalty
ord.mod.lambda1 <- ordreg.lasso(formula = y ~ .,
data = dat,
lambda = 1)
param.est <- data.frame("method" = rep(c("truth", "polr", "ordreg", "ordreg.lasso"),
each = p + J - 1),
"paremeter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 4),
"estimate" = c(alpha0, beta0,
ord.mod.polr$zeta, ord.mod.polr$coefficients,
ord.mod.lambda0$alpha, ord.mod.lambda0$beta,
ord.mod.lambda1$alpha, ord.mod.lambda1$beta))
ggplot(param.est,
aes(x = parameter,
y = estimate,
color = method)) +
geom_point()
library(ggplot2)
ggplot(param.est,
aes(x = parameter,
y = estimate,
color = method)) +
geom_point()
param.est <- data.frame("method" = rep(c("truth", "polr", "ordreg", "ordreg.lasso"),
each = p + J - 1),
"parameter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 4),
"estimate" = c(alpha0, beta0,
ord.mod.polr$zeta, ord.mod.polr$coefficients,
ord.mod.lambda0$alpha, ord.mod.lambda0$beta,
ord.mod.lambda1$alpha, ord.mod.lambda1$beta))
ggplot(param.est,
aes(x = parameter,
y = estimate,
color = method)) +
geom_point()
ggplot(param.est,
aes(x = parameter,
y = estimate,
color = method,
shape = method)) +
geom_point()
ggplot(param.est,
aes(x = parameter,
y = estimate,
color = method,
shape = method)) +
geom_jitter()
ggplot(param.est,
aes(x = method,
y = estimate,
color = method,
shape = method)) +
geom_point() +
facet_wrap(~ parameter)
param.est <- data.frame("method" = rep(c("truth", "polr", "ordreg", "ordreg.lasso"),
each = p + J - 1),
"parameter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 4),
"estimate" = c(alpha0, beta0,
ord.mod.polr$zeta, ord.mod.polr$coefficients,
ord.mod.lambda0$alpha, ord.mod.lambda0$beta,
ord.mod.lambda1$alpha, ord.mod.lambda1$beta))
ggplot(param.est,
aes(x = method,
y = estimate,
color = method,
shape = method)) +
geom_point() +
facet_wrap(~ parameter)
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter)
param.est <- data.frame("Method" = rep(c("Truth",
"MASS:polr()",
"ordreg.lasso() with Lambda = 0",
"ordreg.lasso() with Lambda = 1"),
each = p + J - 1),
"Parameter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 4),
"Estimate" = c(alpha0, beta0,
ord.mod.polr$zeta, ord.mod.polr$coefficients,
ord.mod.lambda0$alpha, ord.mod.lambda0$beta,
ord.mod.lambda1$alpha, ord.mod.lambda1$beta))
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter)
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
labs(x = "")
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
theme(axis.text.x = "none")
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
theme(axis.text.x = element_blank())
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
param.est <- data.frame("Method" = rep(c("Truth",
"MASS:polr()",
"ordreg.lasso() with Lambda = 0",
"ordreg.lasso() with Lambda = 1"),
each = p + J - 1),
"Parameter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 4),
"Estimate" = c(alpha0, beta0,
ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients,
ord.mod.lambda0$alpha, ord.mod.lambda0$beta,
ord.mod.lambda1$alpha, ord.mod.lambda1$beta))
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
```
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point() +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point(size = 2) +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
param.est <- data.frame("Method" = rep(c("MASS:polr()",
"ordreg.lasso() with Lambda = 0",
"ordreg.lasso() with Lambda = 1"),
each = p + J - 1),
"Parameter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 3),
"Truth" = rep(c(alpha0, beta0), times = 3) +
"Estimate" = c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients,
param.est <- data.frame("Method" = rep(c("MASS:polr()",
"ordreg.lasso() with Lambda = 0",
"ordreg.lasso() with Lambda = 1"),
each = p + J - 1),
"Parameter" = rep(c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
times = 3),
"Truth" = rep(c(alpha0, beta0), times = 3),
"Estimate" = c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients,
ord.mod.lambda0$alpha, ord.mod.lambda0$beta,
ord.mod.lambda1$alpha, ord.mod.lambda1$beta))
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point(size = 2) +
geom_abline(aes(intercept = Truth),
slope = 0) +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method,
intercept = Truth)) +
geom_point(size = 2) +
geom_abline(slope = 0) +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point(size = 2) +
geom_hline(aes(yintercept = Truth)) +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(param.est,
aes(x = Method,
y = Estimate,
color = Method,
shape = Method)) +
geom_point(size = 2) +
geom_hline(aes(yintercept = Truth),
linetype = "dashed") +
facet_wrap(~ Parameter) +
labs(x = "") +
ggtitle("Parameter Estimates for Different Model Fitting Methods") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
library("bios-735-project")
rm(list = ls())
library(MASS)
library(foreign)
library(ggplot2)
library(devtools)
load_all("bios-735-project")
load_all()
