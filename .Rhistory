beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
rm(list = ls())
library(dplyr)
library(tidyr)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.05)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
# compare with ordinalNet results
tic("ordinalNet() function")
res.ordnet <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(res.ordnet$coefs)[rev(1:length(lambdas)),]
View(coef.ordnet)
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = vars(-("method")),
.funs = as.numeric)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = vars(-("method")),
.funs = as.numeric)
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 10
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.05)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
# compare with ordinalNet results
tic("ordinalNet() function")
res.ordnet <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(res.ordnet$coefs)[rev(1:length(lambdas)),]
View(coef.ordnet)
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = vars(-("method")),
.funs = as.numeric)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
color = name)) +
geom_line() +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
color = name)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda)) %>%
mutate(is.alpha = grepl("alpha", name, fixed = TRUE))
View(coef.long)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda)) %>%
mutate(is.alpha = grepl("alpha", name, fixed = TRUE))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
color = is.alpha)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
group = name,
color = is.alpha)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda)) %>%
mutate(type = ifelse(grepl("alpha", name, fixed = TRUE),
"alpha", "beta"))
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda)) %>%
mutate(type = factor(ifelse(grepl("alpha", name, fixed = TRUE),
"alpha", "beta")))
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
group = name,
color = is.alpha)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
group = name,
color = type)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
group = name,
color = type)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate",
color = "Parameter\nType") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 50
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.05)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
# compare with ordinalNet results
tic("ordinalNet() function")
res.ordnet <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(res.ordnet$coefs)[rev(1:length(lambdas)),]
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 50
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.05)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
# compare with ordinalNet results
tic("ordinalNet() function")
res.ordnet <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(res.ordnet$coefs)[rev(1:length(lambdas)),]
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = vars(-("method")),
.funs = as.numeric)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda)) %>%
mutate(type = factor(ifelse(grepl("alpha", name, fixed = TRUE),
"alpha", "beta")))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
group = name,
color = type)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate",
color = "Parameter\nType") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ordinalNet)
library(foreign)
library(devtools)
library(kableExtra)
library(tictoc)
load_all()
set.seed(1)
# sample size
n <- 1000
# number of covariates
p <- 50
# number of categories for ordinal outcome
J <- 4
# grid of lambdas
lambdas <- seq(0, 0.3, 0.05)
# set population parameters
alpha <- seq(.5, 1.5, length = J - 1) # category-specific intercepts
zeta <- get.zeta(alpha)               # transformation of alpha
beta <- rep(0, p)                     # slope parameters
beta[1: floor(p / 2)] <- 1            # half of the betas are 0, other half are 1
# simulate data according to the above parameters
dat <- simulate.data(
n = 1000,
alpha = alpha,
beta = beta)
dat[1:10, 1:10] %>%
mutate_if(.predicate = function(x) is.numeric(x),
.funs = function(x) round(x, digits = 2))
# test our LASSO-penalized ordinal regression function
tic("our ordreg.lasso() function")
res.ordreg <- ordreg.lasso(
formula = y ~ .,
data = dat,
lambdas
)
toc()
coef.ordreg <- cbind(res.ordreg$alpha, res.ordreg$beta)
# compare with ordinalNet results
tic("ordinalNet() function")
res.ordnet <- ordinalNet::ordinalNet(
x = as.matrix(dat[, -1]),
y = dat[, 1],
alpha = 1, # alpha = 1 corresponds to LASSO
lambdaVals = lambdas,
link = "logit",
family = "cumulative"
)
toc()
# need to reverse the order of rows to match output
coef.ordnet <- as.matrix(res.ordnet$coefs)[rev(1:length(lambdas)),]
# create data frame with coefficient estimates from both methods
coef.wide <- rbind(cbind("ordreg", lambdas, coef.ordreg),
cbind("ordnet", lambdas, coef.ordnet)) %>%
as.data.frame() %>%
`colnames<-`(c("method",
"lambda",
paste0("alpha", 1:(J-1)),
paste0("beta", 1:p))) %>%
mutate_at(.vars = vars(-("method")),
.funs = as.numeric)
coef.long <- coef.wide %>%
pivot_longer(cols = -c(method, lambda)) %>%
mutate(type = factor(ifelse(grepl("alpha", name, fixed = TRUE),
"alpha", "beta")))
ggplot(NULL,
aes(x = coef.long$value[coef.long$method == "ordnet"],
y = coef.long$value[coef.long$method == "ordreg"])) +
geom_point(size = 3,
shape = 1) +
geom_abline(color = "blue",
linetype = "dashed") +
labs(x = "Estimates from ordinalNet Function",
y = "Estimates from ordreg_lasso Function") +
ggtitle("Comparison of LASSO-Penalized Ordinal Regression Methods") +
theme_bw()
ggplot(data = filter(coef.long, method == "ordreg"),
aes(x = lambda,
y = value,
group = name,
color = type)) +
geom_line() +
labs(x = "Lambda",
y = "LASSO-Penalized Estimate",
color = "Parameter\nType") +
ggtitle("LASSO-Estimates vs Penalization Parameter Lambda") +
theme_bw()
document()
