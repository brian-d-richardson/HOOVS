"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3),
row.names = F) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)"),
row.names = ""
caption = "Ordinal Regression Model Estimates by Method") %>%
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3),
row.names = F) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)")) %>%
caption = "Ordinal Regression Model Estimates by Method") %>%
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3),
row.names = F) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)"),
caption = "Ordinal Regression Model Estimates by Method") %>%
kable_classic(full_width = F)
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3),
row.names = F) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)"),
row.names = NULL,
caption = "Ordinal Regression Model Estimates by Method") %>%
kable_classic(full_width = F)
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3)) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)"),
row.names = NULL,
caption = "Ordinal Regression Model Estimates by Method") %>%
kable_classic(full_width = F)
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3))
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3)) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)"),
row.names = NULL,
caption = "Ordinal Regression Model Estimates by Method")
data.frame("Parameter" = c(paste0("alpha", 1:(J-1)),
paste0("beta", 1:p)),
"Truth" = c(alpha0, beta0),
"polr" = round(c(ord.mod.polr$zeta, -1 * ord.mod.polr$coefficients), 3),
"ordreg.lasso.0" = round(c(ord.mod.lambda0$alpha, ord.mod.lambda0$beta), 3),
"ordreg.lasso.1" = round(c(ord.mod.lambda1$alpha, ord.mod.lambda1$beta), 3)) %>%
kable(col.names = c("Paremeter", "Truth", "MASS:polr()",
"ordreg.lasso (lambd = 0)",
"ordreg.lasso (lambd = 0.05)"),
caption = "Ordinal Regression Model Estimates by Method") %>%
kable_classic(full_width = F)
###############################################################################
###############################################################################
# Title: HDAC_Fig5D
# Author: Brian Richardson
# Date: 2023/04/05
# Purpose: Run a Wilcoxon Rank Sum test on the data in figure 5D using updated
# data set received 2023/04/03
###############################################################################
###############################################################################
# setup -------------------------------------------------------------------
rm(list = ls())
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/CFAR/Projects in Progress/HDAC")
library(ggplot2)
library(dplyr)
library(tidyr)
# load-data ---------------------------------------------------------------
D.raw <- read.csv("Data/fig5Ddata.csv")
D <- D.raw %>%
pivot_longer(cols = !donor) %>%
rename("treatment" = name) %>%
arrange(treatment) %>%
mutate(treatment = factor(treatment),
change = value - D.raw$DMSO)
# plot data ---------------------------------------------------------------
ggplot(filter(D, treatment != "DMSO"),
aes(x = treatment,
y = change)) +
geom_boxplot() +
labs(title = "Difference in %GFP+ Between Treatment and Control",
subtitle = "21 Days After Knockout") +
geom_hline(yintercept = 0,
color = "blue",
linetype = "dotted") +
xlab("Treatment") +
ylab("Change in %GFP+ Under %Thy1.2+ Gate") +
theme(legend.position = "none") -> fig5D
ggsave("HDAC_Fig5D.png", fig5D,
width = 6,
height = 4)
# WSR Tests ---------------------------------------------------------------
# function to run Wilcoxon signed rank test
wsr.fun <- function(trt) {
n <- sum(D$treatment == trt & !is.na(D$value))
wsr <- wilcox.test(D$value[D$treatment == "DMSO"],
D$value[D$treatment == trt],
alternative = "two.sided",
paired = T,
exact = F)
return(c(wsr$statistic,
n,
wsr$p.value))
}
# data frame to store test results
wsr.res <- data.frame(matrix(ncol = 4,
nrow = nlevels(D$treatment) - 1))
colnames(wsr.res) <- c("Treatment",
"WSR Statistic",
"Treatment Group Sample Size",
"Unadjusted P-Value")
# run test for each treatment
for (i in 2:nlevels(D$treatment)) {
wsr.res[i-1, ] <- c(levels(D$treatment)[i],
wsr.fun(levels(D$treatment)[i]))
}
# Bonferonni Adjusted P-Values
wsr.res$`Adjusted P-Value` <- as.numeric(wsr.res$`Unadjusted P-Value`) *
nrow(wsr.res)
ggsave("HDAC_Fig5D.png", fig5D,
width = 6,
height = 4)
fig5D
###############################################################################
###############################################################################
# Title: HDAC_Fig5D
# Author: Brian Richardson
# Date: 2023/04/05
# Purpose: Run a Wilcoxon Rank Sum test on the data in figure 5D using updated
# data set received 2023/04/03
###############################################################################
###############################################################################
# setup -------------------------------------------------------------------
rm(list = ls())
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/CFAR/Projects in Progress/HDAC")
library(ggplot2)
library(dplyr)
library(tidyr)
# load-data ---------------------------------------------------------------
D.raw <- read.csv("Data/fig5Ddata.csv")
D <- D.raw %>%
pivot_longer(cols = !donor) %>%
rename("treatment" = name) %>%
arrange(treatment) %>%
mutate(treatment = factor(treatment),
change = value - D.raw$DMSO)
# plot data ---------------------------------------------------------------
ggplot(filter(D, treatment != "DMSO"),
aes(x = treatment,
y = change)) +
geom_boxplot() +
labs(title = "Difference in %GFP+ Between Treatment and Control",
subtitle = "21 Days After Knockout") +
geom_hline(yintercept = 0,
color = "blue",
linetype = "dotted") +
xlab("Treatment") +
ylab("Change in %GFP+ Under %Thy1.2+ Gate") +
theme(legend.position = "none") -> fig5D
ggsave("HDAC_Fig5D.png", fig5D,
width = 6,
height = 4)
# WSR Tests ---------------------------------------------------------------
# function to run Wilcoxon signed rank test
wsr.fun <- function(trt) {
n <- sum(D$treatment == trt & !is.na(D$value))
wsr <- wilcox.test(D$value[D$treatment == "DMSO"],
D$value[D$treatment == trt],
alternative = "two.sided",
paired = T,
exact = F)
return(c(wsr$statistic,
n,
wsr$p.value))
}
# data frame to store test results
wsr.res <- data.frame(matrix(ncol = 4,
nrow = nlevels(D$treatment) - 1))
colnames(wsr.res) <- c("Treatment",
"WSR Statistic",
"Treatment Group Sample Size",
"Unadjusted P-Value")
# run test for each treatment
for (i in 2:nlevels(D$treatment)) {
wsr.res[i-1, ] <- c(levels(D$treatment)[i],
wsr.fun(levels(D$treatment)[i]))
}
# Bonferonni Adjusted P-Values
wsr.res$`Adjusted P-Value` <- as.numeric(wsr.res$`Unadjusted P-Value`) *
nrow(wsr.res)
write.csv(wsr.res, "figure5D_results_v2.csv", row.names = F)
wilcox.test(c(75.6, 80.6, 71.5, 97.0, 71.5),
c(28.3, 20.7, 17.6, 57.7, 17.6),
alternative = "two.sided",
paired = TRUE,
exact = T)
###############################################################################
###############################################################################
# Title: HDAC_Fig5D
# Author: Brian Richardson
# Date: 2023/04/05
# Purpose: Run a Wilcoxon Rank Sum test on the data in figure 5D using updated
# data set received 2023/04/03
###############################################################################
###############################################################################
# setup -------------------------------------------------------------------
rm(list = ls())
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/CFAR/Projects in Progress/HDAC")
library(ggplot2)
library(dplyr)
library(tidyr)
# load-data ---------------------------------------------------------------
D.raw <- read.csv("Data/fig5Ddata.csv")
D <- D.raw %>%
pivot_longer(cols = !donor) %>%
rename("treatment" = name) %>%
arrange(treatment) %>%
mutate(treatment = factor(treatment),
change = value - D.raw$DMSO)
# plot data ---------------------------------------------------------------
ggplot(filter(D, treatment != "DMSO"),
aes(x = treatment,
y = change)) +
geom_boxplot() +
labs(title = "Difference in %GFP+ Between Treatment and Control",
subtitle = "21 Days After Knockout") +
geom_hline(yintercept = 0,
color = "blue",
linetype = "dotted") +
xlab("Treatment") +
ylab("Change in %GFP+ Under %Thy1.2+ Gate") +
theme(legend.position = "none") -> fig5D
ggsave("HDAC_Fig5D.png", fig5D,
width = 6,
height = 4)
# WSR Tests ---------------------------------------------------------------
# function to run Wilcoxon signed rank test
wsr.fun <- function(trt) {
n <- sum(D$treatment == trt & !is.na(D$value))
wsr <- wilcox.test(D$value[D$treatment == "DMSO"],
D$value[D$treatment == trt],
alternative = "two.sided",
paired = T,
exact = F)
return(c(wsr$statistic,
n,
wsr$p.value))
}
# data frame to store test results
wsr.res <- data.frame(matrix(ncol = 4,
nrow = nlevels(D$treatment) - 1))
colnames(wsr.res) <- c("Treatment",
"WSR Statistic",
"Treatment Group Sample Size",
"Unadjusted P-Value")
# run test for each treatment
for (i in 2:nlevels(D$treatment)) {
wsr.res[i-1, ] <- c(levels(D$treatment)[i],
wsr.fun(levels(D$treatment)[i]))
}
# Bonferonni Adjusted P-Values
wsr.res$`Adjusted P-Value` <- as.numeric(wsr.res$`Unadjusted P-Value`) *
nrow(wsr.res)
write.csv(wsr.res, "figure5D_results_v2.csv", row.names = F)
wsr.res
rm(list = ls())
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/CFAR/Projects in Progress/HDAC")
library(ggplot2)
library(dplyr)
library(tidyr)
D.raw <- read.csv("Data/fig5Ddata.csv")
D <- D.raw %>%
pivot_longer(cols = !donor) %>%
rename("treatment" = name) %>%
arrange(treatment) %>%
mutate(treatment = factor(treatment),
change = value - D.raw$DMSO)
View(D)
View(D.raw)
ggplot(filter(D, treatment != "DMSO"),
aes(x = treatment,
y = change)) +
geom_boxplot() +
labs(title = "Difference in %GFP+ Between Treatment and Control",
subtitle = "21 Days After Knockout") +
geom_hline(yintercept = 0,
color = "blue",
linetype = "dotted") +
xlab("Treatment") +
ylab("Change in %GFP+ Under %Thy1.2+ Gate") +
theme(legend.position = "none") -> fig5D
ggsave("HDAC_Fig5D.png", fig5D,
width = 6,
height = 4)
wsr.fun <- function(trt) {
n <- sum(D$treatment == trt & !is.na(D$value))
wsr <- wilcox.test(D$value[D$treatment == "DMSO"],
D$value[D$treatment == trt],
alternative = "two.sided",
paired = T,
exact = F)
return(c(wsr$statistic,
n,
wsr$p.value))
}
# data frame to store test results
wsr.res <- data.frame(matrix(ncol = 4,
nrow = nlevels(D$treatment) - 1))
colnames(wsr.res) <- c("Treatment",
"WSR Statistic",
"Treatment Group Sample Size",
"Unadjusted P-Value")
# run test for each treatment
for (i in 2:nlevels(D$treatment)) {
wsr.res[i-1, ] <- c(levels(D$treatment)[i],
wsr.fun(levels(D$treatment)[i]))
}
# Bonferonni Adjusted P-Values
wsr.res$`Adjusted P-Value` <- as.numeric(wsr.res$`Unadjusted P-Value`) *
nrow(wsr.res)
wsr.res
wilcox.test(x = 1:5,
y = 1 + (1:5),
paired = T)
wilcox.test(x = 1:5,
y = 5 + (1:5),
paired = T)
5 + (1:5)
1:5
wilcox.test(x = 1:5,
y = 5 + (1:5),
paired = Talternative = "two.sided",
wilcox.test(x = 1:5,
y = 5 + (1:5),
paired = T,
alternative = "two.sided",
paired = T)
wilcox.test(x = 1:5,
y = 5 + (1:5),
paired = T,
alternative = "two.sided")
wilcox.test(x = 1:5,
y = 5 + (1:5),
paired = T,
alternative = "two.sided",
exact = F)
trt = "VOr"
trt = "Vor"
D$value[D$treatment == "DMSO"]
D$value[D$treatment == trt]
wsr.res
wilcox.test(x = D$value[D$treatment == "DMSO"],
y = D$value[D$treatment == trt],
paired = T,
alternative = "two.sided",
exact = F)
D$value[D$treatment == "DMSO"]
D$value[D$treatment == trt]
D$value[D$treatment == "DMSO"] - D$value[D$treatment == trt]
wilcox.test(x = c(-47.3, -59.9, -53.9, -38.1, -32.6),
alternative = "two.sided",
exact = F)
wilcox.test(x = rep(1, 5),
alternative = "two.sided",
exact = F)
wilcox.test(x = rep(-1, 5),
alternative = "two.sided",
exact = F)
wilcox.test(x = 1:5,
alternative = "two.sided",
exact = F)
wilcox.test(x = 1:5,
alternative = "two.sided",
exact = F)
wilcox.test(x = c(-47.3, -59.9, -53.9, -38.1, -32.6),
alternative = "two.sided",
exact = T)
wilcox.test(x = c(-47.3, -59.9, -53.9, -38.1, -32.6),
alternative = "two.sided",
exact = T)
wilcox.test(x = c(-47.3, -59.9, -53.9, -38.1, -32.6),
alternative = "two.sided")
wilcox.test(x = rep(1, 5),
alternative = "two.sided")
wilcox.test(x = c(-47.3, -59.9, -53.9, -38.1, -32.6),
alternative = "two.sided",
exact = F)
wilcox.test(x = rep(1, 5),
alternative = "two.sided")
?wilcox.test(x = rep(1, 5),
alternative = "two.sided")
## accuracy in ties determination via 'digits.rank':
wilcox.test( 4:2,      3:1,     paired=TRUE) # Warning:  cannot compute exact p-value with ties
wilcox.test((4:2)/10, (3:1)/10, paired=TRUE) # no ties => *no* warning
wilcox.test((4:2)/10, (3:1)/10, paired=TRUE, digits.rank = 9) # same ties as (4:2, 3:1)
wilcox.test(x = D$value[D$treatment == "DMSO"],
y = D$value[D$treatment == trt],
paired = F,
alternative = "two.sided")
wilcox.test(x = D$value[D$treatment == "DMSO"],
y = D$value[D$treatment == trt],
paired = T,
alternative = "two.sided")
wilcox.test(x = c(1, 1, 1, 1, 1),
alternative = "two.sided")
wilcox.test(x = c(1, 1, 1, 1, 1),
alternative = "two.sided",
exact = F)
wilcox.test(x = c(1, 1, 1, 1, 2),
alternative = "two.sided",
exact = F)
wilcox.test(x = c(1, 1, 1, 1, 3),
alternative = "two.sided",
exact = F)
wilcox.test(x = c(1, 1, 1, 2, 2),
alternative = "two.sided",
exact = F)
View(D)
wilcox.test(x = 1:5, y = rep(6, 5))
wilcox.test(x = 1:5)
wilcox.test(x = 1:6)
data(faithful)
rm(list = ls())
library(caret)
install.packages("caret")
library(caret)
library(ggplot2)
data(faithful)
n <- nrow(faithful)
faithful <- data.frame(lapply(faithful, scale))
plot(faithful)
data(faithful)
n <- nrow(faithful)
faithful <- data.frame(lapply(faithful, scale))
View(faithful)
plot(faithful)
rm(list = ls())
library(caret)
library(ggplot2)
rm(list = ls())
library(caret)
library(ggplot2)
data(faithful0)
n <- nrow(faithful0)
rm(list = ls())
library(caret)
library(ggplot2)
data(faithful)
n <- nrow(faithful)
faithful <- data.frame(lapply(faithful, scale))
plot(faithful)
View(faithful)
faithful$cl <- factor(kmeans(faithful, centers=2)$cluster)
plot(faithful[,1:2], col=faithful$cl)
# make it more challenging
set.seed(1)
faithful[,1] <- faithful[,1] + rt(n,df=5)/2
faithful[,2] <- faithful[,2] + rt(n,df=5)/2
plot(faithful[,1:2], col=faithful$cl)
x <- faithful[,1:2]
y <- faithful[,3]
# plot data
ggplot(faithful,
aes(x = eruptions,
y = waiting)) +
geom_point()
# load faithful data
data(faithful)
# load faithful data
data(faithful)
n <- nrow(faithful)
dat <- data.frame(lapply(faithful, scale))
# plot data
ggplot(dat,
aes(x = eruptions,
y = waiting)) +
geom_point()
View(dat)
